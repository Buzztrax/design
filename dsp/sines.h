/* Alternative sine functions for benchmarking and qualitive comparission
 */


// One sine quadrant
static const float QuarterSine[64] = {0.0, 0.0245, 0.0491, 0.0736, 0.098, 0.1224, 0.1467, 0.171, 0.1951, 0.2191, 0.243, 0.2667, 0.2903, 0.3137, 0.3369, 0.3599, 0.3827, 0.4052, 0.4276, 0.4496, 0.4714, 0.4929, 0.5141, 0.535, 0.5556, 0.5758, 0.5957, 0.6152, 0.6344, 0.6532, 0.6716, 0.6895, 0.7071, 0.7242, 0.741, 0.7572, 0.773, 0.7883, 0.8032, 0.8176, 0.8315, 0.8449, 0.8577, 0.8701, 0.8819, 0.8932, 0.904, 0.9142, 0.9239, 0.933, 0.9415, 0.9495, 0.9569, 0.9638, 0.97, 0.9757, 0.9808, 0.9853, 0.9892, 0.9925, 0.9952, 0.9973, 0.9988, 0.9997};

static float qtab_sin(float brads_f) {
  const uint_fast8_t brads = ((unsigned long )brads_f) & 0xFF;
  const uint_fast8_t ix = (brads & 0x3F);
  const uint_fast8_t quarter = (brads & 0xC0);
  if (quarter < 128) {
    if (quarter == 0) {
      return QuarterSine[ix];
    } else {
      return (!ix ? 1.0 : QuarterSine[64 - ix]);
    }
  } else {
    if (quarter == 128) {
      return -QuarterSine[ix];
    } else {
      return (!ix ? -1.0 : -QuarterSine[64 - ix]);
    }
  }
  /* The switch case is quite a bit slower.
  switch(quarter) {
    case 0: return QuarterSine[ix];
    case 64: return (!ix ? 1.0 : QuarterSine[64 - ix]);
    case 128: return -QuarterSine[ix];
    case 192: return (!ix ? -1.0 : -QuarterSine[64 - ix]);
    default: return 0;
  }
  */
}

// A full sine
static const float FullSine[256]={
 0.000000, 0.024541, 0.049068, 0.073565, 0.098017, 0.122411, 0.146730, 0.170962, 0.195090, 0.219101, 0.242980, 0.266713, 0.290285, 0.313682, 0.336890, 0.359895,
 0.382683, 0.405241, 0.427555, 0.449611, 0.471397, 0.492898, 0.514103, 0.534998, 0.555570, 0.575808, 0.595699, 0.615232, 0.634393, 0.653173, 0.671559, 0.689541,
 0.707107, 0.724247, 0.740951, 0.757209, 0.773011, 0.788347, 0.803208, 0.817585, 0.831470, 0.844854, 0.857729, 0.870087, 0.881921, 0.893224, 0.903989, 0.914210,
 0.923880, 0.932993, 0.941544, 0.949528, 0.956940, 0.963776, 0.970031, 0.975702, 0.980785, 0.985278, 0.989176, 0.992479, 0.995185, 0.997290, 0.998795, 0.999699,
 1.000000, 0.999699, 0.998796, 0.997291, 0.995185, 0.992480, 0.989177, 0.985278, 0.980786, 0.975702, 0.970032, 0.963776, 0.956941, 0.949529, 0.941545, 0.932993,
 0.923880, 0.914210, 0.903990, 0.893225, 0.881922, 0.870088, 0.857729, 0.844854, 0.831470, 0.817586, 0.803208, 0.788347, 0.773011, 0.757209, 0.740952, 0.724248,
 0.707107, 0.689541, 0.671559, 0.653173, 0.634394, 0.615232, 0.595700, 0.575808, 0.555570, 0.534998, 0.514103, 0.492898, 0.471397, 0.449611, 0.427555, 0.405241,
 0.382683, 0.359895, 0.336889, 0.313681, 0.290284, 0.266712, 0.242979, 0.219100, 0.195089, 0.170961, 0.146729, 0.122410, 0.098016, 0.073563, 0.049066, 0.024540,
 -0.000002, -0.024543, -0.049069, -0.073566, -0.098019, -0.122413, -0.146732, -0.170964, -0.195092, -0.219103, -0.242982, -0.266715, -0.290287, -0.313684, -0.336892, -0.359897,
 -0.382686, -0.405244, -0.427558, -0.449614, -0.471399, -0.492901, -0.514105, -0.535000, -0.555573, -0.575811, -0.595702, -0.615234, -0.634396, -0.653176, -0.671562, -0.689543,
 -0.707109, -0.724250, -0.740954, -0.757211, -0.773013, -0.788349, -0.803210, -0.817587, -0.831472, -0.844856, -0.857731, -0.870089, -0.881923, -0.893226, -0.903991, -0.914212,
 -0.923881, -0.932994, -0.941546, -0.949530, -0.956942, -0.963777, -0.970032, -0.975703, -0.980786, -0.985279, -0.989177, -0.992480, -0.995185, -0.997291, -0.998796, -0.999699,
 -1.000000, -0.999699, -0.998795, -0.997290, -0.995184, -0.992479, -0.989176, -0.985277, -0.980784, -0.975701, -0.970030, -0.963774, -0.956938, -0.949526, -0.941542, -0.932990,
 -0.923877, -0.914207, -0.903986, -0.893221, -0.881918, -0.870083, -0.857725, -0.844850, -0.831465, -0.817581, -0.803203, -0.788342, -0.773006, -0.757204, -0.740946, -0.724242,
 -0.707101, -0.689535, -0.671553, -0.653167, -0.634387, -0.615225, -0.595693, -0.575801, -0.555563, -0.534990, -0.514095, -0.492891, -0.471389, -0.449603, -0.427547, -0.405233,
 -0.382675, -0.359886, -0.336881, -0.313673, -0.290276, -0.266704, -0.242971, -0.219092, -0.195081, -0.170952, -0.146721, -0.122401, -0.098007, -0.073555, -0.049058, -0.024531,
};

static float ftab_sin(float brads_f) {
  const uint_fast8_t brads = ((unsigned long)brads_f) & 0xFF;
  return FullSine[brads];
}

static float ftab_sin_int(float brads_f) {
  const uint_fast8_t brads = ((unsigned long)brads_f) & 0xFF;
  const float f = brads_f - (float)brads;

  // read two nearest values from the sin table and interpolate
  float a = FullSine[brads];
  float b = FullSine[(brads+1) & 0xFF];

  // This is the regullar form, but the 2nd one is faster and okay since 'b'
  // and 'a' won't have a large delta.
  //return (1.0f-f)*a + f*b;
  return a + f * (b - a);
}

// delta values for interpolation
static const float FullSinDelta[]={
 0.024541, 0.024526, 0.024497, 0.024453, 0.024394, 0.024320, 0.024231, 0.024128, 0.024011, 0.023879, 0.023733, 0.023572, 0.023397, 0.023208, 0.023005, 0.022788,
 0.022558, 0.022314, 0.022056, 0.021785, 0.021501, 0.021205, 0.020895, 0.020573, 0.020238, 0.019891, 0.019532, 0.019162, 0.018780, 0.018386, 0.017982, 0.017566,
 0.017140, 0.016704, 0.016258, 0.015802, 0.015336, 0.014861, 0.014377, 0.013885, 0.013384, 0.012875, 0.012358, 0.011834, 0.011303, 0.010765, 0.010220, 0.009670,
 0.009113, 0.008551, 0.007984, 0.007412, 0.006836, 0.006255, 0.005671, 0.005083, 0.004492, 0.003899, 0.003303, 0.002705, 0.002106, 0.001505, 0.000903, 0.000301,
 -0.000301, -0.000903, -0.001505, -0.002106, -0.002705, -0.003303, -0.003899, -0.004492, -0.005083, -0.005671, -0.006255, -0.006836, -0.007412, -0.007984, -0.008551, -0.009113,
 -0.009670, -0.010220, -0.010765, -0.011303, -0.011834, -0.012358, -0.012875, -0.013384, -0.013885, -0.014377, -0.014861, -0.015336, -0.015802, -0.016258, -0.016704, -0.017140,
 -0.017566, -0.017982, -0.018386, -0.018780, -0.019162, -0.019532, -0.019891, -0.020238, -0.020573, -0.020895, -0.021205, -0.021502, -0.021785, -0.022056, -0.022314, -0.022558,
 -0.022788, -0.023005, -0.023208, -0.023397, -0.023572, -0.023733, -0.023879, -0.024011, -0.024129, -0.024231, -0.024320, -0.024394, -0.024453, -0.024497, -0.024527, -0.024541,
 -0.024541, -0.024527, -0.024497, -0.024453, -0.024394, -0.024320, -0.024231, -0.024128, -0.024011, -0.023879, -0.023733, -0.023572, -0.023397, -0.023208, -0.023005, -0.022788,
 -0.022558, -0.022314, -0.022056, -0.021785, -0.021501, -0.021205, -0.020895, -0.020573, -0.020238, -0.019891, -0.019532, -0.019162, -0.018780, -0.018386, -0.017982, -0.017566,
 -0.017140, -0.016704, -0.016258, -0.015802, -0.015336, -0.014861, -0.014377, -0.013885, -0.013384, -0.012875, -0.012358, -0.011834, -0.011303, -0.010765, -0.010220, -0.009670,
 -0.009113, -0.008551, -0.007984, -0.007412, -0.006836, -0.006255, -0.005671, -0.005083, -0.004492, -0.003899, -0.003303, -0.002705, -0.002106, -0.001505, -0.000903, -0.000301,
 0.000301, 0.000904, 0.001505, 0.002106, 0.002705, 0.003303, 0.003899, 0.004493, 0.005083, 0.005671, 0.006255, 0.006836, 0.007412, 0.007984, 0.008551, 0.009113,
 0.009670, 0.010221, 0.010765, 0.011303, 0.011834, 0.012359, 0.012875, 0.013384, 0.013885, 0.014377, 0.014861, 0.015336, 0.015802, 0.016258, 0.016704, 0.017140,
 0.017566, 0.017982, 0.018386, 0.018780, 0.019162, 0.019532, 0.019891, 0.020238, 0.020573, 0.020895, 0.021205, 0.021502, 0.021786, 0.022056, 0.022314, 0.022558,
 0.022789, 0.023005, 0.023208, 0.023397, 0.023572, 0.023733, 0.023879, 0.024011, 0.024129, 0.024232, 0.024320, 0.024394, 0.024453, 0.024497, 0.024527, 0.024541,
};

static float ftab_sin_int_delta(float brads_f) {
  const uint_fast8_t brads = ((unsigned long)brads_f) & 0xFF;
  const float f = brads_f - (float)brads;

  return FullSine[brads] + f * FullSinDelta[brads];
}




/* ----------------------------------------------------------------------
* Copyright (C) 2010-2014 ARM Limited. All rights reserved.
*
* $Date:        21. September 2015
* $Revision:    V.1.4.5 a
*
* Project:      CMSIS DSP Library
* Title:        arm_sin_f32.c
* Title:	      arm_common_tables.h
*
* Description:  Fast sine calculation for floating-point values.
*
* Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*   - Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   - Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in
*     the documentation and/or other materials provided with the
*     distribution.
*   - Neither the name of ARM LIMITED nor the names of its contributors
*     may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
* -------------------------------------------------------------------- */
// https://github.com/ARM-software/CMSIS/blob/master/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_f32.c
// https://github.com/ARM-software/CMSIS/blob/master/CMSIS/DSP_Lib/Source/CommonTables/arm_common_tables.c
#define FAST_MATH_TABLE_SIZE  512
static const float sinTable_f32[FAST_MATH_TABLE_SIZE + 1] = {
   0.00000000f, 0.01227154f, 0.02454123f, 0.03680722f, 0.04906767f, 0.06132074f,
   0.07356456f, 0.08579731f, 0.09801714f, 0.11022221f, 0.12241068f, 0.13458071f,
   0.14673047f, 0.15885814f, 0.17096189f, 0.18303989f, 0.19509032f, 0.20711138f,
   0.21910124f, 0.23105811f, 0.24298018f, 0.25486566f, 0.26671276f, 0.27851969f,
   0.29028468f, 0.30200595f, 0.31368174f, 0.32531029f, 0.33688985f, 0.34841868f,
   0.35989504f, 0.37131719f, 0.38268343f, 0.39399204f, 0.40524131f, 0.41642956f,
   0.42755509f, 0.43861624f, 0.44961133f, 0.46053871f, 0.47139674f, 0.48218377f,
   0.49289819f, 0.50353838f, 0.51410274f, 0.52458968f, 0.53499762f, 0.54532499f,
   0.55557023f, 0.56573181f, 0.57580819f, 0.58579786f, 0.59569930f, 0.60551104f,
   0.61523159f, 0.62485949f, 0.63439328f, 0.64383154f, 0.65317284f, 0.66241578f,
   0.67155895f, 0.68060100f, 0.68954054f, 0.69837625f, 0.70710678f, 0.71573083f,
   0.72424708f, 0.73265427f, 0.74095113f, 0.74913639f, 0.75720885f, 0.76516727f,
   0.77301045f, 0.78073723f, 0.78834643f, 0.79583690f, 0.80320753f, 0.81045720f,
   0.81758481f, 0.82458930f, 0.83146961f, 0.83822471f, 0.84485357f, 0.85135519f,
   0.85772861f, 0.86397286f, 0.87008699f, 0.87607009f, 0.88192126f, 0.88763962f,
   0.89322430f, 0.89867447f, 0.90398929f, 0.90916798f, 0.91420976f, 0.91911385f,
   0.92387953f, 0.92850608f, 0.93299280f, 0.93733901f, 0.94154407f, 0.94560733f,
   0.94952818f, 0.95330604f, 0.95694034f, 0.96043052f, 0.96377607f, 0.96697647f,
   0.97003125f, 0.97293995f, 0.97570213f, 0.97831737f, 0.98078528f, 0.98310549f,
   0.98527764f, 0.98730142f, 0.98917651f, 0.99090264f, 0.99247953f, 0.99390697f,
   0.99518473f, 0.99631261f, 0.99729046f, 0.99811811f, 0.99879546f, 0.99932238f,
   0.99969882f, 0.99992470f, 1.00000000f, 0.99992470f, 0.99969882f, 0.99932238f,
   0.99879546f, 0.99811811f, 0.99729046f, 0.99631261f, 0.99518473f, 0.99390697f,
   0.99247953f, 0.99090264f, 0.98917651f, 0.98730142f, 0.98527764f, 0.98310549f,
   0.98078528f, 0.97831737f, 0.97570213f, 0.97293995f, 0.97003125f, 0.96697647f,
   0.96377607f, 0.96043052f, 0.95694034f, 0.95330604f, 0.94952818f, 0.94560733f,
   0.94154407f, 0.93733901f, 0.93299280f, 0.92850608f, 0.92387953f, 0.91911385f,
   0.91420976f, 0.90916798f, 0.90398929f, 0.89867447f, 0.89322430f, 0.88763962f,
   0.88192126f, 0.87607009f, 0.87008699f, 0.86397286f, 0.85772861f, 0.85135519f,
   0.84485357f, 0.83822471f, 0.83146961f, 0.82458930f, 0.81758481f, 0.81045720f,
   0.80320753f, 0.79583690f, 0.78834643f, 0.78073723f, 0.77301045f, 0.76516727f,
   0.75720885f, 0.74913639f, 0.74095113f, 0.73265427f, 0.72424708f, 0.71573083f,
   0.70710678f, 0.69837625f, 0.68954054f, 0.68060100f, 0.67155895f, 0.66241578f,
   0.65317284f, 0.64383154f, 0.63439328f, 0.62485949f, 0.61523159f, 0.60551104f,
   0.59569930f, 0.58579786f, 0.57580819f, 0.56573181f, 0.55557023f, 0.54532499f,
   0.53499762f, 0.52458968f, 0.51410274f, 0.50353838f, 0.49289819f, 0.48218377f,
   0.47139674f, 0.46053871f, 0.44961133f, 0.43861624f, 0.42755509f, 0.41642956f,
   0.40524131f, 0.39399204f, 0.38268343f, 0.37131719f, 0.35989504f, 0.34841868f,
   0.33688985f, 0.32531029f, 0.31368174f, 0.30200595f, 0.29028468f, 0.27851969f,
   0.26671276f, 0.25486566f, 0.24298018f, 0.23105811f, 0.21910124f, 0.20711138f,
   0.19509032f, 0.18303989f, 0.17096189f, 0.15885814f, 0.14673047f, 0.13458071f,
   0.12241068f, 0.11022221f, 0.09801714f, 0.08579731f, 0.07356456f, 0.06132074f,
   0.04906767f, 0.03680722f, 0.02454123f, 0.01227154f, 0.00000000f, -0.01227154f,
   -0.02454123f, -0.03680722f, -0.04906767f, -0.06132074f, -0.07356456f,
   -0.08579731f, -0.09801714f, -0.11022221f, -0.12241068f, -0.13458071f,
   -0.14673047f, -0.15885814f, -0.17096189f, -0.18303989f, -0.19509032f,
   -0.20711138f, -0.21910124f, -0.23105811f, -0.24298018f, -0.25486566f,
   -0.26671276f, -0.27851969f, -0.29028468f, -0.30200595f, -0.31368174f,
   -0.32531029f, -0.33688985f, -0.34841868f, -0.35989504f, -0.37131719f,
   -0.38268343f, -0.39399204f, -0.40524131f, -0.41642956f, -0.42755509f,
   -0.43861624f, -0.44961133f, -0.46053871f, -0.47139674f, -0.48218377f,
   -0.49289819f, -0.50353838f, -0.51410274f, -0.52458968f, -0.53499762f,
   -0.54532499f, -0.55557023f, -0.56573181f, -0.57580819f, -0.58579786f,
   -0.59569930f, -0.60551104f, -0.61523159f, -0.62485949f, -0.63439328f,
   -0.64383154f, -0.65317284f, -0.66241578f, -0.67155895f, -0.68060100f,
   -0.68954054f, -0.69837625f, -0.70710678f, -0.71573083f, -0.72424708f,
   -0.73265427f, -0.74095113f, -0.74913639f, -0.75720885f, -0.76516727f,
   -0.77301045f, -0.78073723f, -0.78834643f, -0.79583690f, -0.80320753f,
   -0.81045720f, -0.81758481f, -0.82458930f, -0.83146961f, -0.83822471f,
   -0.84485357f, -0.85135519f, -0.85772861f, -0.86397286f, -0.87008699f,
   -0.87607009f, -0.88192126f, -0.88763962f, -0.89322430f, -0.89867447f,
   -0.90398929f, -0.90916798f, -0.91420976f, -0.91911385f, -0.92387953f,
   -0.92850608f, -0.93299280f, -0.93733901f, -0.94154407f, -0.94560733f,
   -0.94952818f, -0.95330604f, -0.95694034f, -0.96043052f, -0.96377607f,
   -0.96697647f, -0.97003125f, -0.97293995f, -0.97570213f, -0.97831737f,
   -0.98078528f, -0.98310549f, -0.98527764f, -0.98730142f, -0.98917651f,
   -0.99090264f, -0.99247953f, -0.99390697f, -0.99518473f, -0.99631261f,
   -0.99729046f, -0.99811811f, -0.99879546f, -0.99932238f, -0.99969882f,
   -0.99992470f, -1.00000000f, -0.99992470f, -0.99969882f, -0.99932238f,
   -0.99879546f, -0.99811811f, -0.99729046f, -0.99631261f, -0.99518473f,
   -0.99390697f, -0.99247953f, -0.99090264f, -0.98917651f, -0.98730142f,
   -0.98527764f, -0.98310549f, -0.98078528f, -0.97831737f, -0.97570213f,
   -0.97293995f, -0.97003125f, -0.96697647f, -0.96377607f, -0.96043052f,
   -0.95694034f, -0.95330604f, -0.94952818f, -0.94560733f, -0.94154407f,
   -0.93733901f, -0.93299280f, -0.92850608f, -0.92387953f, -0.91911385f,
   -0.91420976f, -0.90916798f, -0.90398929f, -0.89867447f, -0.89322430f,
   -0.88763962f, -0.88192126f, -0.87607009f, -0.87008699f, -0.86397286f,
   -0.85772861f, -0.85135519f, -0.84485357f, -0.83822471f, -0.83146961f,
   -0.82458930f, -0.81758481f, -0.81045720f, -0.80320753f, -0.79583690f,
   -0.78834643f, -0.78073723f, -0.77301045f, -0.76516727f, -0.75720885f,
   -0.74913639f, -0.74095113f, -0.73265427f, -0.72424708f, -0.71573083f,
   -0.70710678f, -0.69837625f, -0.68954054f, -0.68060100f, -0.67155895f,
   -0.66241578f, -0.65317284f, -0.64383154f, -0.63439328f, -0.62485949f,
   -0.61523159f, -0.60551104f, -0.59569930f, -0.58579786f, -0.57580819f,
   -0.56573181f, -0.55557023f, -0.54532499f, -0.53499762f, -0.52458968f,
   -0.51410274f, -0.50353838f, -0.49289819f, -0.48218377f, -0.47139674f,
   -0.46053871f, -0.44961133f, -0.43861624f, -0.42755509f, -0.41642956f,
   -0.40524131f, -0.39399204f, -0.38268343f, -0.37131719f, -0.35989504f,
   -0.34841868f, -0.33688985f, -0.32531029f, -0.31368174f, -0.30200595f,
   -0.29028468f, -0.27851969f, -0.26671276f, -0.25486566f, -0.24298018f,
   -0.23105811f, -0.21910124f, -0.20711138f, -0.19509032f, -0.18303989f,
   -0.17096189f, -0.15885814f, -0.14673047f, -0.13458071f, -0.12241068f,
   -0.11022221f, -0.09801714f, -0.08579731f, -0.07356456f, -0.06132074f,
   -0.04906767f, -0.03680722f, -0.02454123f, -0.01227154f, -0.00000000f
};

float arm_sin_f32(float x)
{
  float sinVal, fract, in;                           /* Temporary variables for input, output */
  uint16_t index;                                        /* Index variable */
  float a, b;                                        /* Two nearest output values */
  int32_t n;
  float findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if(x < 0.0f)
  {
    n--;
  }

  /* Map input value to [0 1] */
  in = in - (float) n;

  /* Calculation of index of the table */
  findex = (float) FAST_MATH_TABLE_SIZE * in;
  if (findex >= 512.0f) {
    findex -= 512.0f;
  }

  index = ((uint16_t)findex) & 0x1ff;

  /* fractional value calculation */
  fract = findex - (float) index;

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;

  /* Return the output value */
  return (sinVal);
}
